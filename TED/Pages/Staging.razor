@using TED.Models.MetaData;
@using System.Text.Json
@using Mapster;
@using TED.Processors;
@using TED.Utility;
@using TED.Extensions;
@using Microsoft.Extensions.Options;

@inject IDialogService DialogService
@inject IConfiguration Configuration
@inject NavigationManager UriHelper
@inject ILogger<Staging> logger
@inject ILoggerFactory LoggerFactory
@inject IOptions<TED.Models.Configuration> TEDConfiguration
 @inject NavigationManager NavigationManager
 
@page "/staging"

<PageTitle>Staging</PageTitle>

<MudToolBar DisableGutters=true>
    <MudPaper Height="38px" Class="d-flex justify-space-around mr-2" Elevation="0">
        <MudProgressLinear Vertical="true" Striped="true" Color="Color.Primary" Size="Size.Small" Max="@_directorysFound" Value="@_processingDirectoryProgress" />
    </MudPaper>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ScreenSearchDesktop" Color="Color.Default" Size="Size.Medium" OnClick="@( async (e) => await DoScan())">Scan</MudButton>
    <MudMenu Class="ml-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Filter" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color.Info" Size="Size.Medium" Label="Filter">
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x != null, false))">No Filter</MudMenuItem>
        <MudDivider />
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x.Status == Enums.Statuses.Duplicate, false))">Duplicates</MudMenuItem>
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x.Status == Enums.Statuses.Incomplete, false))">Incomplete</MudMenuItem>        
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x.TrackCount < 4, true))">Less than 3 Tracks</MudMenuItem>
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x.Status != Enums.Statuses.Ok, false))">Needs Attention</MudMenuItem>
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x.Status == Enums.Statuses.Ok, true))">Ready to Move</MudMenuItem>
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x.IsStudioAlbumType, false))">Studio Albums</MudMenuItem>                
        <MudMenuItem OnClick="@( (e) => FilterReleases(x => x.DurationMinutes <= 12, true))">Under 12 Minutes</MudMenuItem>
    </MudMenu>
    <MudMenu Class="ml-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SelectAll" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color.Info" Size="Size.Medium" Label="Select">
        <MudMenuItem OnClick="@( (e) => ToggleSelected(true))">Select All</MudMenuItem>
        <MudMenuItem OnClick="@( (e) => ToggleSelected(false))">Select None</MudMenuItem>
    </MudMenu>
    <MudMenu Class="ml-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Sort" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color.Info" Size="Size.Medium" Label="Sort">
        <MudMenuItem Icon="@sortingIcon(0)"  OnClick="@( (e) => SortReleases(x => x.Index, 0))">By Index</MudMenuItem>
        <MudMenuItem Icon="@sortingIcon(1)"  OnClick="@( (e) => SortReleases(x => x.Artist.Text, 1))">Artist</MudMenuItem>
        <MudMenuItem Icon="@sortingIcon(2)"  OnClick="@( (e) => SortReleases(x => x.ReleaseData.Text, 2))">Release</MudMenuItem>               
        <MudMenuItem Icon="@sortingIcon(3)"  OnClick="@( (e) => SortReleases(x => x.Year, 3))">Year</MudMenuItem>               

    </MudMenu>        
    <MudButton Disabled="@(!_releases.Any(x => x.Selected))" Class="ml-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DriveFileMove" Color="Color.Info" Size="Size.Medium" OnClick="@((e) => MoveCheckedToInbound())">To Inbound</MudButton>
    <MudButton Disabled="@(!_releases.Any(x => x.Selected))" Class="ml-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Warning" Size="Size.Medium" OnClick="@((e) => DeleteChecked())">Delete</MudButton>
    <MudButton Disabled="@(!_releases.Any(x => x.Selected))" Class="ml-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AutoAwesome" Color="Color.Secondary" Size="Size.Medium" OnClick="@((e) => DoMagic())">Do Magic</MudButton>
    <MudSpacer />
    @if (_releases.Any(x => x.Status != Enums.Statuses.Ok))
    {
        <MudBadge Max="1000" Size="Size.Medium" Content="@_releases.Count(x => x != null && x.Status == Enums.Statuses.Ok)" Overlap="true" Class="mx-3 my-4">
            <MudIcon Icon="@Icons.Material.Outlined.Folder" Color="Color.Success" />
        </MudBadge>
        <MudBadge Max="1000" Size="Size.Medium" Content="@_releases.Count(x => x != null && x.Status != Enums.Statuses.Ok)" Overlap="true" Class="mx-3 my-4">
            <MudIcon Icon="@Icons.Material.Outlined.Folder" Color="Color.Warning" />
        </MudBadge>
    }
    <MudBadge Max="10000" Size="Size.Medium" Content="@_releases.Count()" Overlap="true" Class="mx-3 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Folder" Color="Color.Default" />
    </MudBadge>
    <MudBadge Max="10000" Size="Size.Medium" Content="@_releases.Sum(x => x.TrackCount)" Overlap="true" Class="mx-3 my-4">
        <MudIcon Icon="@Icons.Material.Filled.AudioFile" Color="Color.Default" />
    </MudBadge>
</MudToolBar>


<MudGrid>
    @foreach (var release in _releases)
    {
        @if (release.ReleaseData == null)
        {
            <MudCard xs="4" Class="status-error py-4">
                <MudCardContent>
                    <MudText Typo="Typo.body2">@release?.ToString()</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" />
                </MudCardActions>
            </MudCard>
        }
        else
        {
            <MudCard xs="4" Class="@($"release-{(release.IsValid ? "valid" : "invalid")} status-{release.Status.ToString().ToLower()} is-studio-albumtype-{ release.IsStudioAlbumType.ToString().ToLower()} ma-2")">
                <MudCardActions>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudTooltip Text="@release.Directory">
                            <MudIconButton OnClick="@((e) => OpenReleaseDirectory(release.Directory))" Icon="@Icons.Material.Filled.FolderOpen" Color="Color.Info" />
                        </MudTooltip>
                        <MudIconButton OnClick="@((e) => DeleteReleaseDirectory(release.Directory))" Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" />
                        <MudIconButton OnClick="@((e) => DeleteAllImagesInDirectory(release.Directory))" Icon="@Icons.Material.Filled.HideImage" Color="Color.Warning" />
                        <MudIconButton OnClick="@((e) => EditRelease(release))" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                        <MudToggleIconButton @bind-Toggled="@release.Selected"
                                     Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" Color="@Color.Default"
                                     ToggledIcon="@Icons.Material.Filled.CheckBox" ToggledColor="@Color.Info" />
                    </MudButtonGroup>
                </MudCardActions>

                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Image=@($"data:image/jpeg;base64,{ Convert.ToBase64String(release.ArtistThumbnail?.Bytes ?? new byte[0])}")></MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Class="truncate-text" Typo="Typo.subtitle1">@release.Artist?.Text</MudText>
                        <MudTooltip Text="@release.ReleaseData?.Text">
                            <MudText style="width:250px;" Class="truncate-text" Typo="Typo.subtitle2">
                                <MudChip Variant="Variant.Text" Color="Color.Info">@release.Year</MudChip> @release.ReleaseData?.Text
                            </MudText>
                        </MudTooltip>
                        <MudText Class="truncate-text" Typo="Typo.subtitle2"><MudIcon Title="Duration" Size="Size.Small" Class="pt-2" Icon="@Icons.Material.Filled.LibraryMusic" Color="Color.Info" /> @release.Status.ToString()</MudText>                        
                        <MudText Class="truncate-text" Typo="Typo.subtitle2"><MudIcon Title="Duration" Size="Size.Small" Class="pt-2" Icon="@Icons.Material.Filled.AccessTime" Color="Color.Info" /> @release.DurationTime</MudText>
                        <MudText Class="truncate-text" Typo="Typo.subtitle2"><MudIcon Title="Media Size" Size="Size.Small" Class="pt-2" Icon="@Icons.Material.Filled.AudioFile" Color="Color.Info" /> @release.FormattedMediaSize</MudText>
                    </CardHeaderContent>
                </MudCardHeader>

                <MudCardMedia class="pa-2" Height=200 Style="margin:auto;max-height:200px;width:200px;" Image=@($"data:image/jpeg;base64,{ Convert.ToBase64String(release.CoverImage?.Bytes ?? new byte[0])}") />

                <MudCardContent>
                    @foreach (var media in (release.Media ?? Enumerable.Empty<ReleaseMedia>()).OrderBy(x => x.MediaNumber))
                    {
                        <MudText Class="@($"media-{(media.IsValid ? "valid" : "invalid")}")" Typo="Typo.subtitle1">Media Number: @media.MediaNumber</MudText>
                        @foreach (var track in media.Tracks.OrderBy(x => x.TrackNumber))
                        {
                            <div class="@($"track-{(track.IsValid ? "valid": "invalid")} track-list track-status-{track.Status.ToString().ToLower()} truncate-text")" aria-description="@track.Title">
                                <div class="track-list-tracknumber-container">
                                    <MudChip Class="track-list-tracknumber justify-start" Variant="Variant.Text" Size="Size.Medium" Color="Color.Primary">@track.TrackNumber.ToStringPadLeft(3)</MudChip>
                                </div>
                                <div class="track-list-detail-container">
                                    <div class="track-list-title">@track.Title</div>
                                    <div class="track-list-artist">@track?.TrackArtist?.ArtistData?.Text</div>
                                </div>
                            </div>
                        }
                    }                                      
                </MudCardContent>
            </MudCard>
        }
    }
</MudGrid>


@code {

    [Inject]
    ISnackbar Snackbar { get; set; }

    public sealed class StagingRelease : Release
    {
        public bool Selected { get; set; }
        public int Index {get; set;}
    }

    bool _scanning = false;
    bool _movingFolders = false;
    int _sortingBy = 0;
    readonly CancellationTokenSource tokenSource = new();
    
    string sortingIcon(int selectedSortingBy)
    {
        if(_sortingBy == selectedSortingBy)
        {
            return Icons.Material.Filled.CheckBox;
        }
        return Icons.Material.Filled.CheckBoxOutlineBlank;
    }

    List<StagingRelease> _releases = new List<StagingRelease>();
    List<StagingRelease> _allReleases = new List<StagingRelease>();
    int _directorysFound = 0;
    int _processingDirectoryProgress = 0;
    ReleaseEditProcessor _releaseEditProcessor;
    ILogger<ReleaseSaveProcessor> _releaseSaveProcessorLogger;
    ILogger<DirectoryProcessor> _directoryProcessorLogger;

    public Staging()
    {        
    }

    private ILogger<ReleaseSaveProcessor> ReleaseSaveProcessorLogger => _releaseSaveProcessorLogger ?? (_releaseSaveProcessorLogger = LoggerFactory.CreateLogger<ReleaseSaveProcessor>());

    private ILogger<DirectoryProcessor> DirectoryProcessorLogger => _directoryProcessorLogger ?? (_directoryProcessorLogger = LoggerFactory.CreateLogger<DirectoryProcessor>());

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += (_, _) => tokenSource.Cancel();
        _releaseEditProcessor = new ReleaseEditProcessor(LoggerFactory.CreateLogger<ReleaseEditProcessor>());
        await Task.CompletedTask;
    }

    void OpenReleaseDirectory(string dir)
    {
        System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo() {
            FileName = dir,
            UseShellExecute = true,
            Verb = "open"
        });        
    }

    async Task DeleteAllImagesInDirectory(string dir)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Continue to delete all images in directory? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete Images in Directory", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            foreach (string imageFile in Directory.GetFiles(dir, "*.jpg", SearchOption.AllDirectories))
            {
                try
                {
                    File.SetAttributes(imageFile, FileAttributes.Normal);
                    File.Delete(imageFile);
                }
                catch(Exception ex)             
                {
                    logger.LogError(ex, "Error Deleting Images in directory [{Dir}]", dir);

                }
            }
            Parallel.ForEach(Directory.GetFiles(dir, "*.mp3", SearchOption.TopDirectoryOnly), file =>
            {
                var atl = new ATL.Track(file);
                atl.EmbeddedPictures.Clear();
                atl.Save();
            });
            var parentDirectory = Directory.GetParent(dir).FullName;
            var isParentDirectoryInboundFolder = string.Equals(parentDirectory, TEDConfiguration.Value.StagingDirectory, StringComparison.OrdinalIgnoreCase);
            if (!isParentDirectoryInboundFolder)
            {
                foreach (string imageFile in Directory.GetFiles(parentDirectory, "*.jpg", SearchOption.AllDirectories))
                {
                    try
                    {
                        File.SetAttributes(imageFile, FileAttributes.Normal);
                        File.Delete(imageFile);
                    }
                    catch (Exception ex)
                    {
                        logger.LogError(ex, "Error Deleting Images in directory [{Dir}]", dir);

                    }
                }
            }

            var directoryProcessor = new DirectoryProcessor(DirectoryProcessorLogger);
            var refreshedRelease = (await directoryProcessor.ProcessAsync(DateTime.UtcNow, dir, Directory.GetFiles(dir), true)).Adapt<StagingRelease>();
            refreshedRelease.Selected = refreshedRelease.IsValid;
            RemoveReleaseFromLocalVariables(_releases.First(x => x.Directory == dir));
            _releases.Add(refreshedRelease);
        }
    }

    async Task DeleteReleaseDirectory(string dir)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Continue to delete release directory? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete Directory", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var di = new DirectoryInfo(dir);
            if(di.Exists)
            {
                di.Attributes = FileAttributes.Normal;
                di.Delete(true);
                RemoveReleaseFromLocalVariables(_releases.First(x => x.Directory == dir));
            }
            else
            {
                logger.LogWarning("Attempted to delete non-existant directory [{Dir}]", dir);

            }
        }
    }

    void RemoveReleaseFromLocalVariables(StagingRelease release)
    {
        if(release?.Directory == null)
        {
            return;
        }
        var recheckDuplicates = false;
        var firstRelease = _releases.FirstOrDefault(x => x.Directory == release.Directory);
        if (firstRelease != null)
        {
            _releases.Remove(firstRelease);
            recheckDuplicates = true;
        }
        firstRelease = _allReleases.FirstOrDefault(x => x.Directory == release.Directory);
        if (firstRelease != null)
        {
            _allReleases.Remove(firstRelease);
            recheckDuplicates = true;
        }        
        if (recheckDuplicates)
        {
            MarkDuplicates();
        }
    }

    void EditRelease(StagingRelease release)
    {
        UriHelper.NavigateTo($"/editrelease/{ Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(release.Directory)) }");
    }

    void ToggleSelected(bool selected)
    {
        foreach (var r in _releases)
        {
            r.Selected = selected;
        }
    }

    void UnselectAllReleases()
    {
        foreach (var r in _allReleases)
        {
            r.Selected = false;
        }
        _releases = _allReleases.ToList();
    }

    void FilterReleases(Func<StagingRelease, bool> filter, bool select)
    {
        UnselectAllReleases();
        _releases = _allReleases.Where(filter).ToList();
        foreach (var r in _releases)
        {
            r.Selected = select;
        }
    }

    void SortReleases(Func<StagingRelease, object> sortBy, int _setSortingBy)
    {
        _releases = _allReleases.OrderBy(sortBy).ToList();
        _sortingBy = _setSortingBy;
    }

    async Task DoMagic()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Continue to adjust Releases magically? This process cannot be undone.");
        parameters.Add("ButtonText", "Do Magic");
        parameters.Add("Color", Color.Error);
        var releaseSaveProcessor = new ReleaseSaveProcessor(LoggerFactory.CreateLogger<ReleaseSaveProcessor>());
        var editRelease = new EditRelease();
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Dialog>("Adjust Release MetaData", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var now = DateTime.UtcNow;
            _movingFolders = true;
            var selectedReleases = _releases.Where(x => x.Selected).ToArray();
            _directorysFound = selectedReleases.Count();
            _processingDirectoryProgress = 0;
            await Parallel.ForEachAsync(selectedReleases, async (selectedRelease, cancellationToken) =>
            {
                if (cancellationToken.IsCancellationRequested)
                {
                    return;
                }
                try
                {
                    var processResult = await releaseSaveProcessor.ProcessAsync(now, await _releaseEditProcessor.DoMagic(selectedRelease));
                    if (processResult.Item1)
                    {
                        _processingDirectoryProgress++;
                        if(_processingDirectoryProgress % 10 == 0)
                        {
                            await InvokeAsync(StateHasChanged);
                        }
                        logger.LogInformation("Performed Magic on Release directory [{Release}]", selectedRelease);
                    }
                    else
                    {
                        logger.LogWarning("Unable to Perform Magic on Release directory [{Release] Messages [{Messages}]", selectedRelease, processResult.Item2.ToCsv() );
                    }
                }
                catch (Exception ex)
                {
                    logger.LogError(ex, "Error Doing magic on Release [{Release}]", selectedRelease.ToString());
                }
            });
            _processingDirectoryProgress = 0;
            _movingFolders = false;
            logger.LogDebug("** Magic Completed. Processed [{ReleaseCount}] Releases. Elapsed Time [{ElapsedTime}]", _releases.Count(), (DateTime.UtcNow - now).TotalMilliseconds);
            await DoScan();
        }
    }

    async Task DeleteChecked()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Continue to delete selected directories? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete Selected Directories", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var now = DateTime.UtcNow;
            _movingFolders = true;
            var selectedReleases = _releases.Where(x => x.Selected).ToArray();
            _directorysFound = selectedReleases.Count();
            _processingDirectoryProgress = 0;
            Parallel.ForEach(selectedReleases, async selectedRelease =>
            {
                try
                {
                    Directory.Delete(selectedRelease.Directory, true);
                    RemoveReleaseFromLocalVariables(selectedRelease);
                    _processingDirectoryProgress++;
                    if(_processingDirectoryProgress % 10 == 0)
                    {
                        await InvokeAsync(StateHasChanged);
                    }
                    logger.LogInformation("Deleted Release directory [{Dir}]", selectedRelease.Directory);
                }
                catch (Exception ex)
                {
                    logger.LogError(ex, "Error Deleting Release directory [{Dir}] Ex [{@Error}]", selectedRelease.Directory, ex);

                }
            });
            _processingDirectoryProgress = 0;
            StateHasChanged();
            _movingFolders = false;
            logger.LogDebug("** Deleting Completed. Deleted [{ReleaseCount}] Releases. Elapsed Time [{ElapsedTime}]", selectedReleases.Count(), (DateTime.UtcNow - now).TotalMilliseconds);            
        }
    }

    async Task MoveCheckedToInbound()
    {
        _movingFolders = true;
        var inboundDirectory = TEDConfiguration.Value.InboundDirectory;
        var selectedReleases = _releases.Where(x => x.Selected);
        _directorysFound = selectedReleases.Count();
        _processingDirectoryProgress = 0;
        var now = DateTime.UtcNow;
        var sw = new System.Diagnostics.Stopwatch();
        logger.LogInformation("Moving [{ReleaseCount}] Releases to inbound [{Inbound}]", selectedReleases.Count(), inboundDirectory);
        foreach(var selectedRelease in selectedReleases)
        {
            try
            {
                sw.Restart();
                DirectoryProcessor.MoveFolder(selectedRelease.Directory, Path.Combine(inboundDirectory, new DirectoryInfo(selectedRelease.Directory).Name));
                _processingDirectoryProgress++;
                if(_processingDirectoryProgress % 10 == 0)
                {
                    await InvokeAsync(StateHasChanged);
                }
                sw.Stop();
                logger.LogInformation("Moved [{Dir}] to inbound [{Inbound}] elapsed time [{ElapsedTime}]", selectedRelease.Directory, inboundDirectory, sw.ElapsedMilliseconds);

            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error Moving Release directory [{Dir}]", selectedRelease.Directory);

            }
        }
        _processingDirectoryProgress = 0;
        StateHasChanged();
        _movingFolders = false;
        logger.LogDebug("** Moving Completed. Moved [{SelectedReleases}] Releases. Elapsed Time [{ElapsedTime}]", selectedReleases.Count(), (DateTime.UtcNow - now).TotalMilliseconds);        
        await DoScan();
    }

    int _stagingDirectoryScanLimit = 0;
    int StagingDirectoryScanLimit
    {
        get
        {
            if (_stagingDirectoryScanLimit == 0)
            {
                _stagingDirectoryScanLimit = TEDConfiguration.Value.StagingDirectoryScanLimit;
            }
            return _stagingDirectoryScanLimit;
        }
    }

    async Task DoScan()
    {
        if (!_scanning && !_movingFolders)
        {
            logger.LogDebug("DoScan on StagingDirectory [{Folder}]", TEDConfiguration.Value.StagingDirectory);
            _processingDirectoryProgress = 0;
            _scanning = true;
            var now = DateTime.UtcNow;
            _releases = new List<StagingRelease>();
            var directoryToScan = TEDConfiguration.Value.StagingDirectory;
            var directoryProcessor = new DirectoryProcessor(DirectoryProcessorLogger, TEDConfiguration.Value.StagingDirectoryExtensionsToIgnore);
            var directorysToProcess = Directory.EnumerateDirectories(directoryToScan);
            _directorysFound = directorysToProcess.Count();
            if (_directorysFound > StagingDirectoryScanLimit)
            {
                _directorysFound = StagingDirectoryScanLimit;
            }
            var sw = new System.Diagnostics.Stopwatch();
            sw.Start();
            foreach (var dir in directorysToProcess)
            {
                if (tokenSource.IsCancellationRequested)
                {
                    break;
                }
                logger.LogDebug("Scanning [{Folder}]", dir);
                StagingRelease releaseForDirectory = null;
                var filesInDirectory = Directory.GetFiles(dir, "*.*", SearchOption.TopDirectoryOnly);
                if (filesInDirectory.Any())
                {
                    // Here a release with media sub folders like "CD01" and "CD02" will get processed
                    releaseForDirectory = (await directoryProcessor.ProcessAsync(now, dir, filesInDirectory)).Adapt<StagingRelease>();
                    if (releaseForDirectory != null)
                    {
                        if (releaseForDirectory.Status != Enums.Statuses.NoMediaFiles)
                        {
                            releaseForDirectory.Selected = releaseForDirectory.IsValid;
                            releaseForDirectory.Index = _releases.Count() + 1;
                            _releases.Add(releaseForDirectory);
                            sw.Stop();
                            StateHasChanged();
                            logger.LogInformation("Scanned [{Folder}] Release Status [{Status}] Elapsed Time [{ElapsedTime}]", dir, releaseForDirectory?.Status, sw.ElapsedMilliseconds);
                            sw.Restart();
                        }
                    }
                    if (_releases.Count() >= StagingDirectoryScanLimit)
                    {
                        Snackbar.Add($"Reached maximum Directory scan limit of [{StagingDirectoryScanLimit}]", MudBlazor.Severity.Info);
                        break;
                    }
                }
                foreach (var subDir in Directory.EnumerateDirectories(dir, "*", SearchOption.AllDirectories))
                {
                    try
                    {
                        logger.LogDebug("Scanning [{Folder}] Directory [{SubDir}]", dir, subDir);
                        releaseForDirectory = (await directoryProcessor.ProcessAsync(now, subDir, Directory.GetFiles(subDir))).Adapt<StagingRelease>();
                        if (releaseForDirectory != null && releaseForDirectory.Status != Enums.Statuses.NoMediaFiles)
                        {
                            releaseForDirectory.Selected = releaseForDirectory.IsValid;
                            releaseForDirectory.Index = _releases.Count() + 1;
                            _releases.Add(releaseForDirectory);
                            sw.Stop();
                            StateHasChanged();
                            logger.LogInformation("Scanned [{Folder}] Release Status [{Status}] Elapsed Time [{ElapsedTime}]", subDir, releaseForDirectory?.Status, sw.ElapsedMilliseconds);
                            sw.Restart();
                        }
                        if (_releases.Count() >= StagingDirectoryScanLimit)
                        {
                            Snackbar.Add($"Reached maximum Directory scan limit of [{StagingDirectoryScanLimit}]", MudBlazor.Severity.Info);
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                        logger.LogError(ex, "Error Scanning SubDirectory [{SubDir}], Ex [{@Error}]", subDir, ex);
                    }
                }
                _processingDirectoryProgress++;
            }
            _scanning = false; 
            _processingDirectoryProgress = 0;
            DirectoryProcessor.DeleteEmptyFolders(directoryToScan);
            StateHasChanged();
            _allReleases = _releases;
            MarkDuplicates();
            logger.LogDebug("** Scanning Completed. Found [{ReleaseCount}] Releases. Elapsed Time [{ElapsedTime}]", _releases.Count(), (DateTime.UtcNow - now).TotalMilliseconds);
        }
    }

    void MarkDuplicates()
    {
        // Reset any existing Duplicate marked as may have been delected and will get remarked as Duplicate if found below
        foreach(var dup in _releases.Where(x => x.Status == Enums.Statuses.Duplicate))
        {
            dup.Status = Enums.Statuses.NeedsAttention;
        }
        var duplicates = _releases.GroupBy(x => x.ReleaseData?.Text);
        if(duplicates.Count() > 1)
        {
            foreach(var duplicate in duplicates.Where(x => x.Count() > 1))
            {
                foreach(var dup in _releases.Where(x => x.ReleaseData?.Text.Nullify() != null && string.Equals(x.ReleaseData.Text, duplicate.Key)))
                {
                    dup.Status = Enums.Statuses.Duplicate;
                }
            }
        }
    }
}