@using TED.Models.MetaData;
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@using TED.Processors;
@using TED.Utility;
@using TED.Extensions;

@inject IConfiguration Configuration

@page "/inbound"

<PageTitle>Inbound</PageTitle>

<MudToolBar>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.ScreenSearchDesktop" Color="Color.Info" Size="Size.Medium" OnClick="@( async (e) => await DoScan())">Scan</MudButton>    
    <MudSpacer />
    <MudProgressCircular Class="@(_scanning ? "visible" : "invisible")" Color="Color.Default" Indeterminate="true" />    
</MudToolBar>

<MudGrid>
       @foreach (var release in _releases)
        {
            @if(release.ReleaseData == null)
            {
                <MudCard xs="4" Class="status-error py-4">
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@release?.ToString()</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" />
                     </MudCardActions>
                </MudCard>
            }
            else
            {
            <MudCard xs="4" Class="@($"status-{release.Status.ToString().ToLower()}" + " ma-2")">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Image=@($"data:image/jpeg;base64,{ Convert.ToBase64String(release.ArtistThumbnail?.Bytes ?? new byte[0])}")></MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                        <MudText Typo="Typo.subtitle1">@release.Artist?.Text</MudText>
                        <MudText Typo="Typo.subtitle2"><MudChip Variant="Variant.Text" Color="Color.Info">@release.Year</MudChip> @release.ReleaseData?.Text</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardMedia class="pa-2" Height=200 Style="margin:auto;max-height:200px;width:200px;" Image=@($"data:image/jpeg;base64,{ Convert.ToBase64String(release.Thumbnail?.Bytes ?? new byte[0])}") />
                    <MudCardContent>
                        @foreach(var media in release.Media ?? Enumerable.Empty<ReleaseMedia>())
                        {
                            <MudText Typo="Typo.subtitle1">Media Number: @media.MediaNumber</MudText>
                            @foreach (var track in media.Tracks)
                            {
                                <MudText Class="clipped-text" Typo="Typo.body2"><MudChip Variant="Variant.Text" Color="Color.Primary">@track.TrackNumber</MudChip> @track.Title</MudText>
                            }
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" />
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                    </MudCardActions>
                </MudCard>
            }
            _releaseProgress++;
        }
</MudGrid>

@code {
    bool _scanning = false;
    IEnumerable<Release> _releases = Enumerable.Empty<Release>();
    int _releaseProgress = 0;

    public Inbound()
    {            
    }

    async Task DoScan()
    {
        if(!_scanning)
        {
            _releaseProgress = 0;
            _scanning = true;
            var now = DateTime.UtcNow;
            var foundReleases = new List<Release>();
            var folderToScan = @Configuration["TED:InboundFolder"];
            var directoryProcessor = new DirectoryProcessor();
            foreach(var dir in Directory.EnumerateDirectories(folderToScan))
            {
                var jsonFileName = Path.Combine(dir, "ted.data.json");
                if(File.Exists(jsonFileName))
                {
                    var fileText = await System.IO.File.ReadAllTextAsync(jsonFileName);
                    var release = JsonSerializer.Deserialize<Release>(fileText);
                    if(release != null)
                    {
                        foundReleases.Add(release);
                    }
                }
                else
                {
                    var filesInDirectory = Directory.GetFiles(dir);
                    if(filesInDirectory.Any())
                    {
                        var releaseForDirectory = directoryProcessor.Process(now, dir, filesInDirectory);
                        if(releaseForDirectory != null)
                        {
                            foundReleases.Add(releaseForDirectory);
                        }
                    }
                    foreach(var subDir in Directory.GetDirectories(dir, "*", SearchOption.AllDirectories))
                    {
                        var filesInSubDirectory = Directory.GetFiles(subDir);
                        if (filesInSubDirectory.Any())
                        {
                            var releaseForDirectory = directoryProcessor.Process(now, subDir, filesInSubDirectory);
                            if (releaseForDirectory != null)
                            {
                                foundReleases.Add(releaseForDirectory);
                            }
                        }
                    }
                }
            }
            _releases = foundReleases.ToArray();         
            _scanning = false;
        }
    }
}