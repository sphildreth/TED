@using TED.Models.MetaData;
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@using TED.Processors;
@using TED.Utility;
@using TED.Extensions;
@inject IDialogService DialogService
@inject IConfiguration Configuration

@page "/inbound"

<PageTitle>Inbound</PageTitle>

<MudToolBar>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.ScreenSearchDesktop" Color="Color.Info" Size="Size.Medium" OnClick="@( async (e) => await DoScan())">Scan</MudButton>
    <MudSpacer />
    @if (_releases.Any(x => x.Status != Enums.Statuses.Ok))
    {
        <MudBadge Content="@_releases.Count(x => x.Status == Enums.Statuses.Ok)" Overlap="true" Class="mx-3 my-4">
            <MudIcon Icon="@Icons.Material.Outlined.Folder" Color="Color.Success" />
        </MudBadge>
        <MudBadge Content="@_releases.Count(x => x.Status != Enums.Statuses.Ok)" Overlap="true" Class="mx-3 my-4">
            <MudIcon Icon="@Icons.Material.Outlined.Folder" Color="Color.Warning" />
        </MudBadge>
    }
    <MudBadge Content="@_releases.Count()" Overlap="true" Class="mx-3 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Folder" Color="Color.Default" />
    </MudBadge>
    <MudBadge Content="@_releases.Sum(x => x.TrackCount)" Overlap="true" Class="mx-3 my-4">
        <MudIcon Icon="@Icons.Material.Filled.AudioFile" Color="Color.Default" />
    </MudBadge>
    <MudProgressCircular Class="@(_scanning ? "visible" : "invisible")" Color="Color.Info" Max="@_directorysFound" Value="@_processingDirectoryProgress" />
</MudToolBar>


<MudGrid>
    @foreach (var release in _releases)
    {
        @if (release.ReleaseData == null)
        {
            <MudCard xs="4" Class="status-error py-4">
                <MudCardContent>
                    <MudText Typo="Typo.body2">@release?.ToString()</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" />
                </MudCardActions>
            </MudCard>
        }
        else
        {
            <MudCard xs="4" Class="@($"release-{(release.IsValid ? "valid" : "invalid")} status-{release.Status.ToString().ToLower()} ma-2")">
                <MudCardActions>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudIconButton OnClick="@((e) => OpenReleaseDirectory(release.Directory))" Icon="@Icons.Material.Filled.FolderOpen" Color="Color.Info" />
                        <MudIconButton OnClick="@((e) => DeleteReleaseDirectory(release.Directory))" Icon="@Icons.Material.Filled.Delete" Color="Color.Warning" />
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                    </MudButtonGroup>
                </MudCardActions>

                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Image=@($"data:image/jpeg;base64,{ Convert.ToBase64String(release.ArtistThumbnail?.Bytes ?? new byte[0])}")></MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Class="truncate-text" Typo="Typo.subtitle1">@release.Artist?.Text</MudText>
                        <MudTooltip Text="@release.ReleaseData?.Text">
                            <MudText style="width:250px;" Class="truncate-text" Typo="Typo.subtitle2">
                                <MudChip Variant="Variant.Text" Color="Color.Info">@release.Year</MudChip> @release.ReleaseData?.Text
                            </MudText>
                        </MudTooltip>
                    </CardHeaderContent>
                </MudCardHeader>

                <MudCardMedia class="pa-2" Height=200 Style="margin:auto;max-height:200px;width:200px;" Image=@($"data:image/jpeg;base64,{ Convert.ToBase64String(release.CoverImage?.Bytes ?? new byte[0])}") />

                <MudCardContent>
                    @foreach (var media in release.Media ?? Enumerable.Empty<ReleaseMedia>())
                    {
                        <MudText Class="@($"media-{(media.IsValid ? "valid" : "invalid")}")" Typo="Typo.subtitle1">Media Number: @media.MediaNumber</MudText>
                        @foreach (var track in media.Tracks)
                        {
                            <MudText Class="@($"track-{(track.IsValid ? "valid": "invalid")} track-status-{track.Status.ToString().ToLower()} truncate-text")" style="width:250px;" aria-description="@track.Title" Typo="Typo.body2">
                                <MudChip Variant="Variant.Text" Color="Color.Primary">@track.TrackNumber</MudChip> @track.Title
                            </MudText>
                        }
                    }                                      
                </MudCardContent>
            </MudCard>
        }
    }
</MudGrid>


@code {
    bool _scanning = false;
    List<Release> _releases = new List<Release>();
    int _directorysFound = 0;
    int _processingDirectoryProgress = 0;

    public Inbound()
    {
    }

    void OpenReleaseDirectory(string dir)
    {
        System.Diagnostics.Process.Start("explorer.exe", dir);
    }

    async Task DeleteReleaseDirectory(string dir)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Continue to delete release directory? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete Directory", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Directory.Delete(dir, true);
            _releases.Remove(_releases.First(x => x.Directory == dir));
        }
    }

    async Task DoScan()
    {
        if (!_scanning)
        {
            _processingDirectoryProgress = 0;
            _scanning = true;
            var now = DateTime.UtcNow;
            _releases = new List<Release>();
            var folderToScan = @Configuration["TED:InboundFolder"];
            var directoryProcessor = new DirectoryProcessor();
            var directorysToProcess = Directory.EnumerateDirectories(folderToScan);
            _directorysFound = directorysToProcess.Count();
            foreach (var dir in directorysToProcess)
            {
                var filesInDirectory = Directory.GetFiles(dir);
                if (filesInDirectory.Any())
                {
                    var releaseForDirectory = await directoryProcessor.ProcessAsync(now, dir, filesInDirectory);
                    if (releaseForDirectory != null)
                    {
                        _releases.Add(releaseForDirectory);
                    }
                }
                foreach (var subDir in Directory.GetDirectories(dir, "*", SearchOption.AllDirectories))
                {
                    var filesInSubDirectory = Directory.GetFiles(subDir);
                    if (filesInSubDirectory.Any())
                    {
                        var releaseForDirectory = await directoryProcessor.ProcessAsync(now, subDir, filesInSubDirectory);
                        if (releaseForDirectory != null)
                        {
                            _releases.Add(releaseForDirectory);
                        }
                    }
                }
                _processingDirectoryProgress++;
            }
            _scanning = false;
        }
    }
}