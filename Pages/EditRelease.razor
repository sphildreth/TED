@page "/editrelease/{releaseDirectory}"
@using TED.Models.MetaData;
@using TED.Processors;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<PageTitle>Editing Release</PageTitle>

<div Class="d-flex flex-wrap">
    <MudText Class="mt-4">Editing Directory: @ReleaseDirectory</MudText>
    <MudSpacer />
    <MudBadge Dot="true" Color="@( _release.Status == Enums.Statuses.Ok ? Color.Success : Color.Error )" Class="mx-6 my-4">
        <MudText>Release Status</MudText>
    </MudBadge>
</div>


@using FluentValidation

<MudGrid>
    <MudItem xs="8">
        <MudCard>
            <MudForm Model="@_release" @ref="@form" Validation="@(releaseValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="_release.Artist.Text"
                                  For="@(() => _release.Artist.Text)"
                                  Immediate="true"
                                  Label="Artist Name" />
                    <MudTextField @bind-Value="_release.ReleaseData.Text"
                                  For="@(() => _release.ReleaseData.Text)"
                                  Immediate="true"
                                  Label="Release Title" />
                    <MudDatePicker @bind-Date="_release.ReleaseDateDateTime"
                                   For="@(() => _release.ReleaseDateDateTime)"
                                   Label="Release Date"
                                   DateFormat="yyyy-MM-dd" />
                    <MudSimpleTable Style="pa-4 overflow-x: auto;0" Hover="true" Striped="true">
                    <colgroup>
                       <col span="1" style="width: 15%;">
                       <col span="1" style="width: 15%;">
                       <col span="1" style="width: 20%;">
                       <col span="1" style="width: 50%;">
                    </colgroup>
                    <thead>
                        <tr>
                            <th>Media Number</th>
                            <th>Track Number</th>
                            <th>Track Artist Name</th>
                            <th>Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var media in _release.Media.OrderBy(x => x.MediaNumber))
                        {
                            @foreach (var track in media.Tracks.OrderBy(x => x.TrackNumber))
                            {
                                <tr>
                                    <td>
                                            <MudNumericField T="short?" @bind-Value="@media.MediaNumber"
                                                  For="@(() => @media.MediaNumber)"
                                                  Min="1"
                                                  Max="500"
                                                  Immediate="true" />

                                    </td>
                                    <td>
                                            <MudNumericField @bind-Value="@track.TrackNumber"
                                                  For="@(() => @track.TrackNumber)"
                                                     Min="1"
                                                     Max="1000"
                                                  Immediate="true"/>
                                    </td>
                                        <td>
                                            <MudTextField @bind-Value="@track.TrackArtist.ArtistData.Text"
                                                  For="@(() => @track.TrackArtist.ArtistData.Text)"
                                                  Immediate="true" />
                                        </td>
                                    <td>
                                            <MudTextField @bind-Value="@track.Title"
                                                  For="@(() => @track.Title)"
                                                      Immediate="true"/>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </MudSimpleTable>
                </MudCardContent>
            </MudForm>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Save</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="4">
        <MudSimpleTable Style="pa-4 overflow-x: auto;">
            <thead>
                <tr>
                    @foreach (var h in messageHeadings)
                    {
                        <th>@h</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var message in _release.ProcessingMessages.OrderBy(x => x.IsOK).ThenBy(x => x.Message))
                {
                    <tr style="@($"message-ok-{ ( message.IsOK ? "1" : "0" )}")">
                        <td>@message.StatusIndicator</td>
                        <td>@message.Message</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudItem>
</MudGrid>

@code {
    [Inject]
    ISnackbar Snackbar { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;
    ReleaseFluentValidator releaseValidator = new ReleaseFluentValidator();
    string[] messageHeadings = { "Type", "Details" };

    Release _release = new Release
        {
            Artist = new Models.DataToken(),
            ReleaseData = new Models.DataToken(),
            Media = new List<ReleaseMedia>
            {
                new ReleaseMedia 
                { 
                    Tracks = new List<Track>
                    {
                        new Track
                        {
                            TrackArtist = new Artist()
                            {
                                ArtistData = new Models.DataToken()
                            }
                        }
                    }
                }
            }
        };

    //    OrderDetailsModelFluentValidator orderDetailsValidator = new OrderDetailsModelFluentValidator();

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add("Submited!");
        }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="Release"></typeparam>
    public class ReleaseFluentValidator : AbstractValidator<Release>
    {
        public ReleaseFluentValidator()
        {
            RuleFor(x => x.ReleaseData.Text)
                .NotEmpty()
                .Length(1, 250);

            RuleFor(x => x.Artist.Text)
                .NotEmpty()
                .Length(1, 250);

            //RuleFor(x => x.Email)
            //    .Cascade(CascadeMode.Stop)
            //    .NotEmpty()
            //    .EmailAddress()
            //    .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

            //RuleFor(x => x.CCNumber)
            //    .NotEmpty()
            //    .Length(1, 100)
            //    .CreditCard();

            //RuleFor(x => x.Address.Address)
            //    .NotEmpty()
            //    .Length(1, 100);

            //RuleFor(x => x.Address.City)
            //    .NotEmpty()
            //    .Length(1, 100);

            //RuleFor(x => x.Address.Country)
            //    .NotEmpty()
            //    .Length(1, 100);

            //RuleForEach(x => x.OrderDetails)
            //    .SetValidator(new OrderDetailsModelFluentValidator());
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
         {
             var result = await ValidateAsync(ValidationContext<Release>.CreateWithOptions((Release)model, x => x.IncludeProperties(propertyName)));
             if (result.IsValid)
             {
                 return Array.Empty<string>();
             }
             return result.Errors.Select(e => e.ErrorMessage);
         };
    }

    [Parameter]
    public string? ReleaseDirectory { get; set; }

    public Task DoSave()
    {
        throw new NotImplementedException();
    }


    protected override async Task OnInitializedAsync()
    {
        ReleaseDirectory = System.Net.WebUtility.UrlDecode(ReleaseDirectory);
        DirectoryProcessor directoryProcessor = new DirectoryProcessor();
        _release = await directoryProcessor.ProcessAsync(DateTime.UtcNow, ReleaseDirectory, Directory.GetFiles(ReleaseDirectory ?? string.Empty));
        _release.ReleaseDateDateTime = DateTime.Parse(_release.ReleaseDate ?? DateTime.MinValue.ToString());
    }

}